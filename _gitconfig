[user]
	name = Markus Latvala

[color]
	ui = true

[color "branch"]
    current = red reverse
    local = cyan
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[advice]
    pushNonFastForward = false
    statusHints = false

[core]
    whitespace = trailing-space,space-before-tab

# push/pull/diff options
[push]
    default = upstream
[pull]
    default = current
[diff]
    renames = copies
    memonicprefix = true
[merge]
    stat = true
[branch]
    autosetuprebase = always
    autosetupmerge = true
[apply]
    whitespace = nowarn
[rerere]
    enabled = true

# aliases
[alias]
    # status = status -sb
    st = status -sb
    s = !git st

    cl = clone

    ci = commit
    cm = commit -m
    cma = commit -a -m
    ca = commit --amend
    amend = commit --amend
    caa = commit -a --amend -C HEAD
    filelog = log -u
    fl = log -u

    ai = add --interactive

    co = checkout
    br = branch
    # "!git branch -ra | grep -v done"
    bra = branch -ra

    # list all aliases
    aliases = "!git config -l | grep alias | cut -c 7-"

    # diff = !git diff --word-diff
    d = diff --word-diff
    dc = diff --cached
    
    # reset commands
    unstage = reset
    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard

    #stash
    sl = stash list
    sa = stash apply
    ss = stash save

    cp = cherry-pick
    grep = grep -Ii
    gr = grep -Ii
    # grep from root folder
    # gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

    # grep on filename
    f = "!git ls-files | grep -Ii"

    #rename branch tree to done-
    # done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"

    # diff last commit
    dlc = diff --cached HEAD^
    dr = "!f() { git diff "$1"^.."$1"; }; f"
    diffr = "!f() { git diff "$1"^.."$1"; }; f"

    # assume aliases
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    # show assumed files
    assumed = "!git ls-files -v | grep -i ^h | cut -c 3-"
    # unassume all the assumed files
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
    # skip-worktreee aliases
    skip = update-index --skip-worktree
    unskip = update-index --no-skip-worktree
    # show skip-worktree marked files
    skipped = "!git ls-files -v | grep -i ^s | cut -c 3-"

    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0

    # merges
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    # list remotes
    remotes ="!git config -l | grep remote.*url | tail -n +2"

    # list commands
    le = log --oneline --decorate
    ls1 = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%C(cyan)\\ [%cn]" --decorate
    ll = !git ls1 --numstat
    lds = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%C(cyan)\\ [%cn]" --decorate --date=short --graph
    ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%C(cyan)\\ [%cn]" --decorate --date=relative
    lc = "!f() { git ll "$1"^.."$1"; }; f"
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

    # list modified files in last commit
    dl = !git ll -1

    # pretty ascii graph log format
    l = log --graph --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %C(cyan)[%an]%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=short

    # pretty log with all branches
    la = !git l --all

    # show just commits currently decorated by branch/tag pointers 
    # really useful for high level picture
    ld = !git l --all --simplify-by-decoration 

